# # # Use official Node.js LTS image
# FROM node:22-alpine

# # # Set working directory
# WORKDIR /usr/src/app

# # # Copy dependency files
# COPY package*.json ./
# COPY prisma ./prisma/

# # # Install dependencies
# RUN npm install

# # Run prisma:migrate before starting build
# RUN npm run prisma:migrate

# # Create seeds
# RUN npm run prisma:seed

# # Build TypeScript
# RUN npm run build

# # # Copy source code
# COPY . .

# EXPOSE 8101

# # Start Server
# CMD ["npm", "start"]


# # ===========================================second==========================
# # Use Node.js 22 Alpine
# FROM node:22-alpine

# WORKDIR /usr/src/app

# # Install system dependencies for node-gyp and canvas
# RUN apk add --no-cache \
#     python3 \
#     make \
#     g++ \
#     cairo-dev \
#     jpeg-dev \
#     pango-dev \
#     giflib-dev \
#     pixman-dev \
#     libpng-dev \
#     bash

# # Copy dependency files first (for layer caching)
# COPY package*.json ./

# # Install dependencies
# RUN npm install

# # Copy Prisma schema
# COPY prisma ./prisma/

# # Generate Prisma client
# RUN npx prisma generate

# # Copy full source
# COPY . .

# # Build TypeScript
# # RUN npm run build

# EXPOSE 8101

# # Run migrations + seeds at container start, then start app
# CMD sh -c "npx prisma migrate deploy && npx prisma db seed && npm start"



# # Build stage
# FROM node:22-alpine

# WORKDIR /usr/src/app

# # Install build tools for canvas and other native modules
# RUN apk add --no-cache \
#     python3 \
#     make \
#     g++ \
#     cairo-dev \
#     pango-dev \
#     jpeg-dev \
#     giflib-dev \
#     librsvg-dev \
#     pkgconfig

# COPY backend/package*.json ./
# COPY backend/prisma ./prisma/

# RUN npm install

# COPY backend . 
# RUN npm run build

# # Production stage
# FROM node:22-alpine

# WORKDIR /usr/src/app

# # Install only runtime libs needed for canvas
# RUN apk add --no-cache \
#     cairo \
#     pango \
#     jpeg \
#     giflib \
#     librsvg

# COPY --from=build /usr/src/app/node_modules ./node_modules
# COPY --from=build /usr/src/app/dist ./dist
# COPY --from=build /usr/src/app/prisma ./prisma
# COPY backend/package*.json ./

# EXPOSE 8101
# CMD npx prisma migrate deploy && npm start



#============================

# Stage 1: The Build Stage
FROM node:22-alpine AS builder

WORKDIR /usr/src/app

# Install system dependencies for build (e.g., node-gyp and canvas)
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    pixman-dev \
    libpng-dev \
    bash

# Copy dependency files and install them
COPY package*.json ./
RUN npm install

# Copy all source code and prisma folder
COPY . .

# Generate the Prisma client and build the app
RUN npx prisma generate
RUN npm run build

# Stage 2: The Production Stage
FROM node:22-alpine

WORKDIR /usr/src/app

# IMPORTANT: Install build tools and Python again for the final stage
# This is necessary because npm install --only=production might still need them
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    build-base \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    pixman-dev \
    libpng-dev \
    bash

# Install production-only dependencies
COPY package*.json ./
RUN npm install --only=production

# Copy the compiled 'dist' folder and the prisma directory from the builder stage
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/prisma ./prisma

# Expose the port
EXPOSE 8101

# Run migrations, seeds, and then start the production app
CMD sh -c "npx prisma migrate deploy --preview-feature && npx prisma db seed && npm run start"